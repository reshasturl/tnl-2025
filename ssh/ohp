#!/usr/bin/env python
# OHP (Over HTTP Proxy) - Simple Implementation for YT ZIXSTYLE VPN 2025
# Created: September 7, 2025

import socket
import threading
import argparse
import sys
import time

class OHPServer:
    def __init__(self, port, proxy_host, proxy_port):
        self.port = port
        self.proxy_host = proxy_host
        self.proxy_port = proxy_port
        self.running = False

    def handle_client(self, client_socket):
        try:
            # Connect to the target proxy
            proxy_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            proxy_socket.connect((self.proxy_host, self.proxy_port))
            
            # Start data forwarding threads
            client_to_proxy = threading.Thread(
                target=self.forward_data, 
                args=(client_socket, proxy_socket)
            )
            proxy_to_client = threading.Thread(
                target=self.forward_data, 
                args=(proxy_socket, client_socket)
            )
            
            client_to_proxy.daemon = True
            proxy_to_client.daemon = True
            
            client_to_proxy.start()
            proxy_to_client.start()
            
            # Wait for threads to complete
            client_to_proxy.join()
            proxy_to_client.join()
            
        except Exception as e:
            print(f"Error handling client: {e}")
        finally:
            try:
                client_socket.close()
                proxy_socket.close()
            except:
                pass

    def forward_data(self, source, destination):
        try:
            while True:
                data = source.recv(4096)
                if not data:
                    break
                destination.send(data)
        except:
            pass

    def start(self):
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        try:
            server_socket.bind(('0.0.0.0', self.port))
            server_socket.listen(100)
            self.running = True
            
            print(f"OHP Server listening on port {self.port}")
            print(f"Proxying to {self.proxy_host}:{self.proxy_port}")
            
            while self.running:
                try:
                    client_socket, addr = server_socket.accept()
                    client_thread = threading.Thread(
                        target=self.handle_client, 
                        args=(client_socket,)
                    )
                    client_thread.daemon = True
                    client_thread.start()
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"Error accepting connection: {e}")
                    time.sleep(1)
                    
        except Exception as e:
            print(f"Error starting server: {e}")
            sys.exit(1)
        finally:
            server_socket.close()

def main():
    parser = argparse.ArgumentParser(description='OHP (Over HTTP Proxy) Server')
    parser.add_argument('-port', type=int, required=True, help='Listen port')
    parser.add_argument('-proxy', required=True, help='Proxy target (host:port)')
    parser.add_argument('-tunnel', action='store_true', help='Enable tunnel mode')
    
    args = parser.parse_args()
    
    # Parse proxy target
    try:
        proxy_host, proxy_port = args.proxy.split(':')
        proxy_port = int(proxy_port)
    except ValueError:
        print("Error: proxy format should be host:port")
        sys.exit(1)
    
    # Create and start OHP server
    ohp = OHPServer(args.port, proxy_host, proxy_port)
    
    try:
        ohp.start()
    except KeyboardInterrupt:
        print("\nShutting down OHP server...")
        ohp.running = False

if __name__ == '__main__':
    main()
